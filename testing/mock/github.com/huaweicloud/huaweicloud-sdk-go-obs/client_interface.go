// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/huaweicloud/huaweicloud-sdk-go-obs/obs (interfaces: ObsClientInterface)

// Package obs is a generated GoMock package.
package obs

import (
	io "io"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	obs "github.com/huaweicloud/huaweicloud-sdk-go-obs/obs"
)

// MockObsClientInterface is a mock of ObsClientInterface interface.
type MockObsClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockObsClientInterfaceMockRecorder
}

// MockObsClientInterfaceMockRecorder is the mock recorder for MockObsClientInterface.
type MockObsClientInterfaceMockRecorder struct {
	mock *MockObsClientInterface
}

// NewMockObsClientInterface creates a new mock instance.
func NewMockObsClientInterface(ctrl *gomock.Controller) *MockObsClientInterface {
	mock := &MockObsClientInterface{ctrl: ctrl}
	mock.recorder = &MockObsClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObsClientInterface) EXPECT() *MockObsClientInterfaceMockRecorder {
	return m.recorder
}

// AbortMultipartUpload mocks base method.
func (m *MockObsClientInterface) AbortMultipartUpload(arg0 *obs.AbortMultipartUploadInput, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AbortMultipartUpload", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AbortMultipartUpload indicates an expected call of AbortMultipartUpload.
func (mr *MockObsClientInterfaceMockRecorder) AbortMultipartUpload(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortMultipartUpload", reflect.TypeOf((*MockObsClientInterface)(nil).AbortMultipartUpload), varargs...)
}

// AbortMultipartUploadWithSignedUrl mocks base method.
func (m *MockObsClientInterface) AbortMultipartUploadWithSignedUrl(arg0 string, arg1 http.Header) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortMultipartUploadWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AbortMultipartUploadWithSignedUrl indicates an expected call of AbortMultipartUploadWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) AbortMultipartUploadWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortMultipartUploadWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).AbortMultipartUploadWithSignedUrl), arg0, arg1)
}

// AppendObject mocks base method.
func (m *MockObsClientInterface) AppendObject(arg0 *obs.AppendObjectInput, arg1 ...obs.ExtensionOptions) (*obs.AppendObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AppendObject", varargs...)
	ret0, _ := ret[0].(*obs.AppendObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendObject indicates an expected call of AppendObject.
func (mr *MockObsClientInterfaceMockRecorder) AppendObject(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendObject", reflect.TypeOf((*MockObsClientInterface)(nil).AppendObject), varargs...)
}

// AppendObjectWithSignedURL mocks base method.
func (m *MockObsClientInterface) AppendObjectWithSignedURL(arg0 string, arg1 http.Header, arg2 io.Reader) (*obs.AppendObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendObjectWithSignedURL", arg0, arg1, arg2)
	ret0, _ := ret[0].(*obs.AppendObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendObjectWithSignedURL indicates an expected call of AppendObjectWithSignedURL.
func (mr *MockObsClientInterfaceMockRecorder) AppendObjectWithSignedURL(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendObjectWithSignedURL", reflect.TypeOf((*MockObsClientInterface)(nil).AppendObjectWithSignedURL), arg0, arg1, arg2)
}

// CompleteMultipartUpload mocks base method.
func (m *MockObsClientInterface) CompleteMultipartUpload(arg0 *obs.CompleteMultipartUploadInput, arg1 ...obs.ExtensionOptions) (*obs.CompleteMultipartUploadOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompleteMultipartUpload", varargs...)
	ret0, _ := ret[0].(*obs.CompleteMultipartUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteMultipartUpload indicates an expected call of CompleteMultipartUpload.
func (mr *MockObsClientInterfaceMockRecorder) CompleteMultipartUpload(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteMultipartUpload", reflect.TypeOf((*MockObsClientInterface)(nil).CompleteMultipartUpload), varargs...)
}

// CompleteMultipartUploadWithSignedUrl mocks base method.
func (m *MockObsClientInterface) CompleteMultipartUploadWithSignedUrl(arg0 string, arg1 http.Header, arg2 io.Reader) (*obs.CompleteMultipartUploadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteMultipartUploadWithSignedUrl", arg0, arg1, arg2)
	ret0, _ := ret[0].(*obs.CompleteMultipartUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteMultipartUploadWithSignedUrl indicates an expected call of CompleteMultipartUploadWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) CompleteMultipartUploadWithSignedUrl(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteMultipartUploadWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).CompleteMultipartUploadWithSignedUrl), arg0, arg1, arg2)
}

// CopyObject mocks base method.
func (m *MockObsClientInterface) CopyObject(arg0 *obs.CopyObjectInput, arg1 ...obs.ExtensionOptions) (*obs.CopyObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyObject", varargs...)
	ret0, _ := ret[0].(*obs.CopyObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyObject indicates an expected call of CopyObject.
func (mr *MockObsClientInterfaceMockRecorder) CopyObject(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyObject", reflect.TypeOf((*MockObsClientInterface)(nil).CopyObject), varargs...)
}

// CopyObjectWithSignedUrl mocks base method.
func (m *MockObsClientInterface) CopyObjectWithSignedUrl(arg0 string, arg1 http.Header) (*obs.CopyObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyObjectWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.CopyObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyObjectWithSignedUrl indicates an expected call of CopyObjectWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) CopyObjectWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyObjectWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).CopyObjectWithSignedUrl), arg0, arg1)
}

// CopyPart mocks base method.
func (m *MockObsClientInterface) CopyPart(arg0 *obs.CopyPartInput, arg1 ...obs.ExtensionOptions) (*obs.CopyPartOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyPart", varargs...)
	ret0, _ := ret[0].(*obs.CopyPartOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyPart indicates an expected call of CopyPart.
func (mr *MockObsClientInterfaceMockRecorder) CopyPart(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyPart", reflect.TypeOf((*MockObsClientInterface)(nil).CopyPart), varargs...)
}

// CopyPartWithSignedUrl mocks base method.
func (m *MockObsClientInterface) CopyPartWithSignedUrl(arg0 string, arg1 http.Header) (*obs.CopyPartOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyPartWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.CopyPartOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyPartWithSignedUrl indicates an expected call of CopyPartWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) CopyPartWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyPartWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).CopyPartWithSignedUrl), arg0, arg1)
}

// CreateBrowserBasedSignature mocks base method.
func (m *MockObsClientInterface) CreateBrowserBasedSignature(arg0 *obs.CreateBrowserBasedSignatureInput) (*obs.CreateBrowserBasedSignatureOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBrowserBasedSignature", arg0)
	ret0, _ := ret[0].(*obs.CreateBrowserBasedSignatureOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBrowserBasedSignature indicates an expected call of CreateBrowserBasedSignature.
func (mr *MockObsClientInterfaceMockRecorder) CreateBrowserBasedSignature(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBrowserBasedSignature", reflect.TypeOf((*MockObsClientInterface)(nil).CreateBrowserBasedSignature), arg0)
}

// CreateBucket mocks base method.
func (m *MockObsClientInterface) CreateBucket(arg0 *obs.CreateBucketInput, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBucket", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBucket indicates an expected call of CreateBucket.
func (mr *MockObsClientInterfaceMockRecorder) CreateBucket(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucket", reflect.TypeOf((*MockObsClientInterface)(nil).CreateBucket), varargs...)
}

// CreateBucketWithSignedUrl mocks base method.
func (m *MockObsClientInterface) CreateBucketWithSignedUrl(arg0 string, arg1 http.Header, arg2 io.Reader) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBucketWithSignedUrl", arg0, arg1, arg2)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBucketWithSignedUrl indicates an expected call of CreateBucketWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) CreateBucketWithSignedUrl(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucketWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).CreateBucketWithSignedUrl), arg0, arg1, arg2)
}

// CreateSignedUrl mocks base method.
func (m *MockObsClientInterface) CreateSignedUrl(arg0 *obs.CreateSignedUrlInput, arg1 ...obs.ExtensionOptions) (*obs.CreateSignedUrlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSignedUrl", varargs...)
	ret0, _ := ret[0].(*obs.CreateSignedUrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSignedUrl indicates an expected call of CreateSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) CreateSignedUrl(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).CreateSignedUrl), varargs...)
}

// DeleteBucket mocks base method.
func (m *MockObsClientInterface) DeleteBucket(arg0 string, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBucket", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucket indicates an expected call of DeleteBucket.
func (mr *MockObsClientInterfaceMockRecorder) DeleteBucket(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucket", reflect.TypeOf((*MockObsClientInterface)(nil).DeleteBucket), varargs...)
}

// DeleteBucketCors mocks base method.
func (m *MockObsClientInterface) DeleteBucketCors(arg0 string, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBucketCors", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketCors indicates an expected call of DeleteBucketCors.
func (mr *MockObsClientInterfaceMockRecorder) DeleteBucketCors(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketCors", reflect.TypeOf((*MockObsClientInterface)(nil).DeleteBucketCors), varargs...)
}

// DeleteBucketCorsWithSignedUrl mocks base method.
func (m *MockObsClientInterface) DeleteBucketCorsWithSignedUrl(arg0 string, arg1 http.Header) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucketCorsWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketCorsWithSignedUrl indicates an expected call of DeleteBucketCorsWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) DeleteBucketCorsWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketCorsWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).DeleteBucketCorsWithSignedUrl), arg0, arg1)
}

// DeleteBucketCustomDomain mocks base method.
func (m *MockObsClientInterface) DeleteBucketCustomDomain(arg0 *obs.DeleteBucketCustomDomainInput, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBucketCustomDomain", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketCustomDomain indicates an expected call of DeleteBucketCustomDomain.
func (mr *MockObsClientInterfaceMockRecorder) DeleteBucketCustomDomain(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketCustomDomain", reflect.TypeOf((*MockObsClientInterface)(nil).DeleteBucketCustomDomain), varargs...)
}

// DeleteBucketEncryption mocks base method.
func (m *MockObsClientInterface) DeleteBucketEncryption(arg0 string, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBucketEncryption", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketEncryption indicates an expected call of DeleteBucketEncryption.
func (mr *MockObsClientInterfaceMockRecorder) DeleteBucketEncryption(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketEncryption", reflect.TypeOf((*MockObsClientInterface)(nil).DeleteBucketEncryption), varargs...)
}

// DeleteBucketEncryptionWithSignedURL mocks base method.
func (m *MockObsClientInterface) DeleteBucketEncryptionWithSignedURL(arg0 string, arg1 http.Header) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucketEncryptionWithSignedURL", arg0, arg1)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketEncryptionWithSignedURL indicates an expected call of DeleteBucketEncryptionWithSignedURL.
func (mr *MockObsClientInterfaceMockRecorder) DeleteBucketEncryptionWithSignedURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketEncryptionWithSignedURL", reflect.TypeOf((*MockObsClientInterface)(nil).DeleteBucketEncryptionWithSignedURL), arg0, arg1)
}

// DeleteBucketFetchPolicy mocks base method.
func (m *MockObsClientInterface) DeleteBucketFetchPolicy(arg0 *obs.DeleteBucketFetchPolicyInput, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBucketFetchPolicy", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketFetchPolicy indicates an expected call of DeleteBucketFetchPolicy.
func (mr *MockObsClientInterfaceMockRecorder) DeleteBucketFetchPolicy(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketFetchPolicy", reflect.TypeOf((*MockObsClientInterface)(nil).DeleteBucketFetchPolicy), varargs...)
}

// DeleteBucketLifecycleConfiguration mocks base method.
func (m *MockObsClientInterface) DeleteBucketLifecycleConfiguration(arg0 string, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBucketLifecycleConfiguration", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketLifecycleConfiguration indicates an expected call of DeleteBucketLifecycleConfiguration.
func (mr *MockObsClientInterfaceMockRecorder) DeleteBucketLifecycleConfiguration(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketLifecycleConfiguration", reflect.TypeOf((*MockObsClientInterface)(nil).DeleteBucketLifecycleConfiguration), varargs...)
}

// DeleteBucketLifecycleConfigurationWithSignedUrl mocks base method.
func (m *MockObsClientInterface) DeleteBucketLifecycleConfigurationWithSignedUrl(arg0 string, arg1 http.Header) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucketLifecycleConfigurationWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketLifecycleConfigurationWithSignedUrl indicates an expected call of DeleteBucketLifecycleConfigurationWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) DeleteBucketLifecycleConfigurationWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketLifecycleConfigurationWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).DeleteBucketLifecycleConfigurationWithSignedUrl), arg0, arg1)
}

// DeleteBucketMirrorBackToSource mocks base method.
func (m *MockObsClientInterface) DeleteBucketMirrorBackToSource(arg0 string, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBucketMirrorBackToSource", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketMirrorBackToSource indicates an expected call of DeleteBucketMirrorBackToSource.
func (mr *MockObsClientInterfaceMockRecorder) DeleteBucketMirrorBackToSource(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketMirrorBackToSource", reflect.TypeOf((*MockObsClientInterface)(nil).DeleteBucketMirrorBackToSource), varargs...)
}

// DeleteBucketPolicy mocks base method.
func (m *MockObsClientInterface) DeleteBucketPolicy(arg0 string, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBucketPolicy", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketPolicy indicates an expected call of DeleteBucketPolicy.
func (mr *MockObsClientInterfaceMockRecorder) DeleteBucketPolicy(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketPolicy", reflect.TypeOf((*MockObsClientInterface)(nil).DeleteBucketPolicy), varargs...)
}

// DeleteBucketPolicyWithSignedUrl mocks base method.
func (m *MockObsClientInterface) DeleteBucketPolicyWithSignedUrl(arg0 string, arg1 http.Header) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucketPolicyWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketPolicyWithSignedUrl indicates an expected call of DeleteBucketPolicyWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) DeleteBucketPolicyWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketPolicyWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).DeleteBucketPolicyWithSignedUrl), arg0, arg1)
}

// DeleteBucketTagging mocks base method.
func (m *MockObsClientInterface) DeleteBucketTagging(arg0 string, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBucketTagging", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketTagging indicates an expected call of DeleteBucketTagging.
func (mr *MockObsClientInterfaceMockRecorder) DeleteBucketTagging(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketTagging", reflect.TypeOf((*MockObsClientInterface)(nil).DeleteBucketTagging), varargs...)
}

// DeleteBucketTaggingWithSignedUrl mocks base method.
func (m *MockObsClientInterface) DeleteBucketTaggingWithSignedUrl(arg0 string, arg1 http.Header) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucketTaggingWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketTaggingWithSignedUrl indicates an expected call of DeleteBucketTaggingWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) DeleteBucketTaggingWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketTaggingWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).DeleteBucketTaggingWithSignedUrl), arg0, arg1)
}

// DeleteBucketWebsiteConfiguration mocks base method.
func (m *MockObsClientInterface) DeleteBucketWebsiteConfiguration(arg0 string, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBucketWebsiteConfiguration", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketWebsiteConfiguration indicates an expected call of DeleteBucketWebsiteConfiguration.
func (mr *MockObsClientInterfaceMockRecorder) DeleteBucketWebsiteConfiguration(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketWebsiteConfiguration", reflect.TypeOf((*MockObsClientInterface)(nil).DeleteBucketWebsiteConfiguration), varargs...)
}

// DeleteBucketWebsiteConfigurationWithSignedUrl mocks base method.
func (m *MockObsClientInterface) DeleteBucketWebsiteConfigurationWithSignedUrl(arg0 string, arg1 http.Header) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucketWebsiteConfigurationWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketWebsiteConfigurationWithSignedUrl indicates an expected call of DeleteBucketWebsiteConfigurationWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) DeleteBucketWebsiteConfigurationWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketWebsiteConfigurationWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).DeleteBucketWebsiteConfigurationWithSignedUrl), arg0, arg1)
}

// DeleteBucketWithSignedUrl mocks base method.
func (m *MockObsClientInterface) DeleteBucketWithSignedUrl(arg0 string, arg1 http.Header) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucketWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucketWithSignedUrl indicates an expected call of DeleteBucketWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) DeleteBucketWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucketWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).DeleteBucketWithSignedUrl), arg0, arg1)
}

// DeleteObject mocks base method.
func (m *MockObsClientInterface) DeleteObject(arg0 *obs.DeleteObjectInput, arg1 ...obs.ExtensionOptions) (*obs.DeleteObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteObject", varargs...)
	ret0, _ := ret[0].(*obs.DeleteObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObject indicates an expected call of DeleteObject.
func (mr *MockObsClientInterfaceMockRecorder) DeleteObject(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockObsClientInterface)(nil).DeleteObject), varargs...)
}

// DeleteObjectWithSignedUrl mocks base method.
func (m *MockObsClientInterface) DeleteObjectWithSignedUrl(arg0 string, arg1 http.Header) (*obs.DeleteObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjectWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.DeleteObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObjectWithSignedUrl indicates an expected call of DeleteObjectWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) DeleteObjectWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).DeleteObjectWithSignedUrl), arg0, arg1)
}

// DeleteObjects mocks base method.
func (m *MockObsClientInterface) DeleteObjects(arg0 *obs.DeleteObjectsInput, arg1 ...obs.ExtensionOptions) (*obs.DeleteObjectsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteObjects", varargs...)
	ret0, _ := ret[0].(*obs.DeleteObjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObjects indicates an expected call of DeleteObjects.
func (mr *MockObsClientInterfaceMockRecorder) DeleteObjects(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjects", reflect.TypeOf((*MockObsClientInterface)(nil).DeleteObjects), varargs...)
}

// DeleteObjectsWithSignedUrl mocks base method.
func (m *MockObsClientInterface) DeleteObjectsWithSignedUrl(arg0 string, arg1 http.Header, arg2 io.Reader) (*obs.DeleteObjectsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjectsWithSignedUrl", arg0, arg1, arg2)
	ret0, _ := ret[0].(*obs.DeleteObjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObjectsWithSignedUrl indicates an expected call of DeleteObjectsWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) DeleteObjectsWithSignedUrl(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectsWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).DeleteObjectsWithSignedUrl), arg0, arg1, arg2)
}

// DownloadFile mocks base method.
func (m *MockObsClientInterface) DownloadFile(arg0 *obs.DownloadFileInput, arg1 ...obs.ExtensionOptions) (*obs.GetObjectMetadataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadFile", varargs...)
	ret0, _ := ret[0].(*obs.GetObjectMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockObsClientInterfaceMockRecorder) DownloadFile(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockObsClientInterface)(nil).DownloadFile), varargs...)
}

// GetAttribute mocks base method.
func (m *MockObsClientInterface) GetAttribute(arg0 *obs.GetAttributeInput, arg1 ...obs.ExtensionOptions) (*obs.GetAttributeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAttribute", varargs...)
	ret0, _ := ret[0].(*obs.GetAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttribute indicates an expected call of GetAttribute.
func (mr *MockObsClientInterfaceMockRecorder) GetAttribute(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttribute", reflect.TypeOf((*MockObsClientInterface)(nil).GetAttribute), varargs...)
}

// GetBucketAcl mocks base method.
func (m *MockObsClientInterface) GetBucketAcl(arg0 string, arg1 ...obs.ExtensionOptions) (*obs.GetBucketAclOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketAcl", varargs...)
	ret0, _ := ret[0].(*obs.GetBucketAclOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketAcl indicates an expected call of GetBucketAcl.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketAcl(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketAcl", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketAcl), varargs...)
}

// GetBucketAclWithSignedUrl mocks base method.
func (m *MockObsClientInterface) GetBucketAclWithSignedUrl(arg0 string, arg1 http.Header) (*obs.GetBucketAclOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketAclWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.GetBucketAclOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketAclWithSignedUrl indicates an expected call of GetBucketAclWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketAclWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketAclWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketAclWithSignedUrl), arg0, arg1)
}

// GetBucketCors mocks base method.
func (m *MockObsClientInterface) GetBucketCors(arg0 string, arg1 ...obs.ExtensionOptions) (*obs.GetBucketCorsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketCors", varargs...)
	ret0, _ := ret[0].(*obs.GetBucketCorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketCors indicates an expected call of GetBucketCors.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketCors(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketCors", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketCors), varargs...)
}

// GetBucketCorsWithSignedUrl mocks base method.
func (m *MockObsClientInterface) GetBucketCorsWithSignedUrl(arg0 string, arg1 http.Header) (*obs.GetBucketCorsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketCorsWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.GetBucketCorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketCorsWithSignedUrl indicates an expected call of GetBucketCorsWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketCorsWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketCorsWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketCorsWithSignedUrl), arg0, arg1)
}

// GetBucketCustomDomain mocks base method.
func (m *MockObsClientInterface) GetBucketCustomDomain(arg0 string, arg1 ...obs.ExtensionOptions) (*obs.GetBucketCustomDomainOuput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketCustomDomain", varargs...)
	ret0, _ := ret[0].(*obs.GetBucketCustomDomainOuput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketCustomDomain indicates an expected call of GetBucketCustomDomain.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketCustomDomain(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketCustomDomain", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketCustomDomain), varargs...)
}

// GetBucketEncryption mocks base method.
func (m *MockObsClientInterface) GetBucketEncryption(arg0 string, arg1 ...obs.ExtensionOptions) (*obs.GetBucketEncryptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketEncryption", varargs...)
	ret0, _ := ret[0].(*obs.GetBucketEncryptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketEncryption indicates an expected call of GetBucketEncryption.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketEncryption(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketEncryption", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketEncryption), varargs...)
}

// GetBucketEncryptionWithSignedURL mocks base method.
func (m *MockObsClientInterface) GetBucketEncryptionWithSignedURL(arg0 string, arg1 http.Header) (*obs.GetBucketEncryptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketEncryptionWithSignedURL", arg0, arg1)
	ret0, _ := ret[0].(*obs.GetBucketEncryptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketEncryptionWithSignedURL indicates an expected call of GetBucketEncryptionWithSignedURL.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketEncryptionWithSignedURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketEncryptionWithSignedURL", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketEncryptionWithSignedURL), arg0, arg1)
}

// GetBucketFSStatus mocks base method.
func (m *MockObsClientInterface) GetBucketFSStatus(arg0 *obs.GetBucketFSStatusInput, arg1 ...obs.ExtensionOptions) (*obs.GetBucketFSStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketFSStatus", varargs...)
	ret0, _ := ret[0].(*obs.GetBucketFSStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketFSStatus indicates an expected call of GetBucketFSStatus.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketFSStatus(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketFSStatus", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketFSStatus), varargs...)
}

// GetBucketFetchJob mocks base method.
func (m *MockObsClientInterface) GetBucketFetchJob(arg0 *obs.GetBucketFetchJobInput, arg1 ...obs.ExtensionOptions) (*obs.GetBucketFetchJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketFetchJob", varargs...)
	ret0, _ := ret[0].(*obs.GetBucketFetchJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketFetchJob indicates an expected call of GetBucketFetchJob.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketFetchJob(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketFetchJob", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketFetchJob), varargs...)
}

// GetBucketFetchPolicy mocks base method.
func (m *MockObsClientInterface) GetBucketFetchPolicy(arg0 *obs.GetBucketFetchPolicyInput, arg1 ...obs.ExtensionOptions) (*obs.GetBucketFetchPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketFetchPolicy", varargs...)
	ret0, _ := ret[0].(*obs.GetBucketFetchPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketFetchPolicy indicates an expected call of GetBucketFetchPolicy.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketFetchPolicy(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketFetchPolicy", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketFetchPolicy), varargs...)
}

// GetBucketLifecycleConfiguration mocks base method.
func (m *MockObsClientInterface) GetBucketLifecycleConfiguration(arg0 string, arg1 ...obs.ExtensionOptions) (*obs.GetBucketLifecycleConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketLifecycleConfiguration", varargs...)
	ret0, _ := ret[0].(*obs.GetBucketLifecycleConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketLifecycleConfiguration indicates an expected call of GetBucketLifecycleConfiguration.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketLifecycleConfiguration(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketLifecycleConfiguration", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketLifecycleConfiguration), varargs...)
}

// GetBucketLifecycleConfigurationWithSignedUrl mocks base method.
func (m *MockObsClientInterface) GetBucketLifecycleConfigurationWithSignedUrl(arg0 string, arg1 http.Header) (*obs.GetBucketLifecycleConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketLifecycleConfigurationWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.GetBucketLifecycleConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketLifecycleConfigurationWithSignedUrl indicates an expected call of GetBucketLifecycleConfigurationWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketLifecycleConfigurationWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketLifecycleConfigurationWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketLifecycleConfigurationWithSignedUrl), arg0, arg1)
}

// GetBucketLocation mocks base method.
func (m *MockObsClientInterface) GetBucketLocation(arg0 string, arg1 ...obs.ExtensionOptions) (*obs.GetBucketLocationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketLocation", varargs...)
	ret0, _ := ret[0].(*obs.GetBucketLocationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketLocation indicates an expected call of GetBucketLocation.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketLocation(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketLocation", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketLocation), varargs...)
}

// GetBucketLocationWithSignedUrl mocks base method.
func (m *MockObsClientInterface) GetBucketLocationWithSignedUrl(arg0 string, arg1 http.Header) (*obs.GetBucketLocationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketLocationWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.GetBucketLocationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketLocationWithSignedUrl indicates an expected call of GetBucketLocationWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketLocationWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketLocationWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketLocationWithSignedUrl), arg0, arg1)
}

// GetBucketLoggingConfiguration mocks base method.
func (m *MockObsClientInterface) GetBucketLoggingConfiguration(arg0 string, arg1 ...obs.ExtensionOptions) (*obs.GetBucketLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketLoggingConfiguration", varargs...)
	ret0, _ := ret[0].(*obs.GetBucketLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketLoggingConfiguration indicates an expected call of GetBucketLoggingConfiguration.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketLoggingConfiguration(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketLoggingConfiguration", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketLoggingConfiguration), varargs...)
}

// GetBucketLoggingConfigurationWithSignedUrl mocks base method.
func (m *MockObsClientInterface) GetBucketLoggingConfigurationWithSignedUrl(arg0 string, arg1 http.Header) (*obs.GetBucketLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketLoggingConfigurationWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.GetBucketLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketLoggingConfigurationWithSignedUrl indicates an expected call of GetBucketLoggingConfigurationWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketLoggingConfigurationWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketLoggingConfigurationWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketLoggingConfigurationWithSignedUrl), arg0, arg1)
}

// GetBucketMetadata mocks base method.
func (m *MockObsClientInterface) GetBucketMetadata(arg0 *obs.GetBucketMetadataInput, arg1 ...obs.ExtensionOptions) (*obs.GetBucketMetadataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketMetadata", varargs...)
	ret0, _ := ret[0].(*obs.GetBucketMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketMetadata indicates an expected call of GetBucketMetadata.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketMetadata(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketMetadata", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketMetadata), varargs...)
}

// GetBucketMetadataWithSignedUrl mocks base method.
func (m *MockObsClientInterface) GetBucketMetadataWithSignedUrl(arg0 string, arg1 http.Header) (*obs.GetBucketMetadataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketMetadataWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.GetBucketMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketMetadataWithSignedUrl indicates an expected call of GetBucketMetadataWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketMetadataWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketMetadataWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketMetadataWithSignedUrl), arg0, arg1)
}

// GetBucketMirrorBackToSource mocks base method.
func (m *MockObsClientInterface) GetBucketMirrorBackToSource(arg0 string, arg1 ...obs.ExtensionOptions) (*obs.GetBucketMirrorBackToSourceOuput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketMirrorBackToSource", varargs...)
	ret0, _ := ret[0].(*obs.GetBucketMirrorBackToSourceOuput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketMirrorBackToSource indicates an expected call of GetBucketMirrorBackToSource.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketMirrorBackToSource(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketMirrorBackToSource", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketMirrorBackToSource), varargs...)
}

// GetBucketNotification mocks base method.
func (m *MockObsClientInterface) GetBucketNotification(arg0 string, arg1 ...obs.ExtensionOptions) (*obs.GetBucketNotificationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketNotification", varargs...)
	ret0, _ := ret[0].(*obs.GetBucketNotificationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketNotification indicates an expected call of GetBucketNotification.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketNotification(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketNotification", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketNotification), varargs...)
}

// GetBucketNotificationWithSignedUrl mocks base method.
func (m *MockObsClientInterface) GetBucketNotificationWithSignedUrl(arg0 string, arg1 http.Header) (*obs.GetBucketNotificationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketNotificationWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.GetBucketNotificationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketNotificationWithSignedUrl indicates an expected call of GetBucketNotificationWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketNotificationWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketNotificationWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketNotificationWithSignedUrl), arg0, arg1)
}

// GetBucketPolicy mocks base method.
func (m *MockObsClientInterface) GetBucketPolicy(arg0 string, arg1 ...obs.ExtensionOptions) (*obs.GetBucketPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketPolicy", varargs...)
	ret0, _ := ret[0].(*obs.GetBucketPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketPolicy indicates an expected call of GetBucketPolicy.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketPolicy(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketPolicy", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketPolicy), varargs...)
}

// GetBucketPolicyWithSignedUrl mocks base method.
func (m *MockObsClientInterface) GetBucketPolicyWithSignedUrl(arg0 string, arg1 http.Header) (*obs.GetBucketPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketPolicyWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.GetBucketPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketPolicyWithSignedUrl indicates an expected call of GetBucketPolicyWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketPolicyWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketPolicyWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketPolicyWithSignedUrl), arg0, arg1)
}

// GetBucketQuota mocks base method.
func (m *MockObsClientInterface) GetBucketQuota(arg0 string, arg1 ...obs.ExtensionOptions) (*obs.GetBucketQuotaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketQuota", varargs...)
	ret0, _ := ret[0].(*obs.GetBucketQuotaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketQuota indicates an expected call of GetBucketQuota.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketQuota(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketQuota", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketQuota), varargs...)
}

// GetBucketQuotaWithSignedUrl mocks base method.
func (m *MockObsClientInterface) GetBucketQuotaWithSignedUrl(arg0 string, arg1 http.Header) (*obs.GetBucketQuotaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketQuotaWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.GetBucketQuotaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketQuotaWithSignedUrl indicates an expected call of GetBucketQuotaWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketQuotaWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketQuotaWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketQuotaWithSignedUrl), arg0, arg1)
}

// GetBucketRequestPayment mocks base method.
func (m *MockObsClientInterface) GetBucketRequestPayment(arg0 string, arg1 ...obs.ExtensionOptions) (*obs.GetBucketRequestPaymentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketRequestPayment", varargs...)
	ret0, _ := ret[0].(*obs.GetBucketRequestPaymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketRequestPayment indicates an expected call of GetBucketRequestPayment.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketRequestPayment(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketRequestPayment", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketRequestPayment), varargs...)
}

// GetBucketRequestPaymentWithSignedUrl mocks base method.
func (m *MockObsClientInterface) GetBucketRequestPaymentWithSignedUrl(arg0 string, arg1 http.Header) (*obs.GetBucketRequestPaymentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketRequestPaymentWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.GetBucketRequestPaymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketRequestPaymentWithSignedUrl indicates an expected call of GetBucketRequestPaymentWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketRequestPaymentWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketRequestPaymentWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketRequestPaymentWithSignedUrl), arg0, arg1)
}

// GetBucketStorageInfo mocks base method.
func (m *MockObsClientInterface) GetBucketStorageInfo(arg0 string, arg1 ...obs.ExtensionOptions) (*obs.GetBucketStorageInfoOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketStorageInfo", varargs...)
	ret0, _ := ret[0].(*obs.GetBucketStorageInfoOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketStorageInfo indicates an expected call of GetBucketStorageInfo.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketStorageInfo(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketStorageInfo", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketStorageInfo), varargs...)
}

// GetBucketStorageInfoWithSignedUrl mocks base method.
func (m *MockObsClientInterface) GetBucketStorageInfoWithSignedUrl(arg0 string, arg1 http.Header) (*obs.GetBucketStorageInfoOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketStorageInfoWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.GetBucketStorageInfoOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketStorageInfoWithSignedUrl indicates an expected call of GetBucketStorageInfoWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketStorageInfoWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketStorageInfoWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketStorageInfoWithSignedUrl), arg0, arg1)
}

// GetBucketStoragePolicy mocks base method.
func (m *MockObsClientInterface) GetBucketStoragePolicy(arg0 string, arg1 ...obs.ExtensionOptions) (*obs.GetBucketStoragePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketStoragePolicy", varargs...)
	ret0, _ := ret[0].(*obs.GetBucketStoragePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketStoragePolicy indicates an expected call of GetBucketStoragePolicy.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketStoragePolicy(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketStoragePolicy", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketStoragePolicy), varargs...)
}

// GetBucketStoragePolicyWithSignedUrl mocks base method.
func (m *MockObsClientInterface) GetBucketStoragePolicyWithSignedUrl(arg0 string, arg1 http.Header) (*obs.GetBucketStoragePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketStoragePolicyWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.GetBucketStoragePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketStoragePolicyWithSignedUrl indicates an expected call of GetBucketStoragePolicyWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketStoragePolicyWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketStoragePolicyWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketStoragePolicyWithSignedUrl), arg0, arg1)
}

// GetBucketTagging mocks base method.
func (m *MockObsClientInterface) GetBucketTagging(arg0 string, arg1 ...obs.ExtensionOptions) (*obs.GetBucketTaggingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketTagging", varargs...)
	ret0, _ := ret[0].(*obs.GetBucketTaggingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketTagging indicates an expected call of GetBucketTagging.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketTagging(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketTagging", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketTagging), varargs...)
}

// GetBucketTaggingWithSignedUrl mocks base method.
func (m *MockObsClientInterface) GetBucketTaggingWithSignedUrl(arg0 string, arg1 http.Header) (*obs.GetBucketTaggingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketTaggingWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.GetBucketTaggingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketTaggingWithSignedUrl indicates an expected call of GetBucketTaggingWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketTaggingWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketTaggingWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketTaggingWithSignedUrl), arg0, arg1)
}

// GetBucketVersioning mocks base method.
func (m *MockObsClientInterface) GetBucketVersioning(arg0 string, arg1 ...obs.ExtensionOptions) (*obs.GetBucketVersioningOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketVersioning", varargs...)
	ret0, _ := ret[0].(*obs.GetBucketVersioningOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketVersioning indicates an expected call of GetBucketVersioning.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketVersioning(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketVersioning", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketVersioning), varargs...)
}

// GetBucketVersioningWithSignedUrl mocks base method.
func (m *MockObsClientInterface) GetBucketVersioningWithSignedUrl(arg0 string, arg1 http.Header) (*obs.GetBucketVersioningOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketVersioningWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.GetBucketVersioningOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketVersioningWithSignedUrl indicates an expected call of GetBucketVersioningWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketVersioningWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketVersioningWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketVersioningWithSignedUrl), arg0, arg1)
}

// GetBucketWebsiteConfiguration mocks base method.
func (m *MockObsClientInterface) GetBucketWebsiteConfiguration(arg0 string, arg1 ...obs.ExtensionOptions) (*obs.GetBucketWebsiteConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketWebsiteConfiguration", varargs...)
	ret0, _ := ret[0].(*obs.GetBucketWebsiteConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketWebsiteConfiguration indicates an expected call of GetBucketWebsiteConfiguration.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketWebsiteConfiguration(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketWebsiteConfiguration", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketWebsiteConfiguration), varargs...)
}

// GetBucketWebsiteConfigurationWithSignedUrl mocks base method.
func (m *MockObsClientInterface) GetBucketWebsiteConfigurationWithSignedUrl(arg0 string, arg1 http.Header) (*obs.GetBucketWebsiteConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketWebsiteConfigurationWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.GetBucketWebsiteConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketWebsiteConfigurationWithSignedUrl indicates an expected call of GetBucketWebsiteConfigurationWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) GetBucketWebsiteConfigurationWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketWebsiteConfigurationWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).GetBucketWebsiteConfigurationWithSignedUrl), arg0, arg1)
}

// GetObject mocks base method.
func (m *MockObsClientInterface) GetObject(arg0 *obs.GetObjectInput, arg1 ...obs.ExtensionOptions) (*obs.GetObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObject", varargs...)
	ret0, _ := ret[0].(*obs.GetObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockObsClientInterfaceMockRecorder) GetObject(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockObsClientInterface)(nil).GetObject), varargs...)
}

// GetObjectAcl mocks base method.
func (m *MockObsClientInterface) GetObjectAcl(arg0 *obs.GetObjectAclInput, arg1 ...obs.ExtensionOptions) (*obs.GetObjectAclOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObjectAcl", varargs...)
	ret0, _ := ret[0].(*obs.GetObjectAclOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectAcl indicates an expected call of GetObjectAcl.
func (mr *MockObsClientInterfaceMockRecorder) GetObjectAcl(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectAcl", reflect.TypeOf((*MockObsClientInterface)(nil).GetObjectAcl), varargs...)
}

// GetObjectAclWithSignedUrl mocks base method.
func (m *MockObsClientInterface) GetObjectAclWithSignedUrl(arg0 string, arg1 http.Header) (*obs.GetObjectAclOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectAclWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.GetObjectAclOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectAclWithSignedUrl indicates an expected call of GetObjectAclWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) GetObjectAclWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectAclWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).GetObjectAclWithSignedUrl), arg0, arg1)
}

// GetObjectMetadata mocks base method.
func (m *MockObsClientInterface) GetObjectMetadata(arg0 *obs.GetObjectMetadataInput, arg1 ...obs.ExtensionOptions) (*obs.GetObjectMetadataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObjectMetadata", varargs...)
	ret0, _ := ret[0].(*obs.GetObjectMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectMetadata indicates an expected call of GetObjectMetadata.
func (mr *MockObsClientInterfaceMockRecorder) GetObjectMetadata(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectMetadata", reflect.TypeOf((*MockObsClientInterface)(nil).GetObjectMetadata), varargs...)
}

// GetObjectMetadataWithSignedUrl mocks base method.
func (m *MockObsClientInterface) GetObjectMetadataWithSignedUrl(arg0 string, arg1 http.Header) (*obs.GetObjectMetadataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectMetadataWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.GetObjectMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectMetadataWithSignedUrl indicates an expected call of GetObjectMetadataWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) GetObjectMetadataWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectMetadataWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).GetObjectMetadataWithSignedUrl), arg0, arg1)
}

// GetObjectWithSignedUrl mocks base method.
func (m *MockObsClientInterface) GetObjectWithSignedUrl(arg0 string, arg1 http.Header) (*obs.GetObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.GetObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectWithSignedUrl indicates an expected call of GetObjectWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) GetObjectWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).GetObjectWithSignedUrl), arg0, arg1)
}

// HeadBucket mocks base method.
func (m *MockObsClientInterface) HeadBucket(arg0 string, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HeadBucket", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadBucket indicates an expected call of HeadBucket.
func (mr *MockObsClientInterfaceMockRecorder) HeadBucket(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadBucket", reflect.TypeOf((*MockObsClientInterface)(nil).HeadBucket), varargs...)
}

// HeadBucketWithSignedUrl mocks base method.
func (m *MockObsClientInterface) HeadBucketWithSignedUrl(arg0 string, arg1 http.Header) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadBucketWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadBucketWithSignedUrl indicates an expected call of HeadBucketWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) HeadBucketWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadBucketWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).HeadBucketWithSignedUrl), arg0, arg1)
}

// HeadObject mocks base method.
func (m *MockObsClientInterface) HeadObject(arg0 *obs.HeadObjectInput, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HeadObject", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadObject indicates an expected call of HeadObject.
func (mr *MockObsClientInterfaceMockRecorder) HeadObject(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadObject", reflect.TypeOf((*MockObsClientInterface)(nil).HeadObject), varargs...)
}

// HeadObjectWithSignedUrl mocks base method.
func (m *MockObsClientInterface) HeadObjectWithSignedUrl(arg0 string, arg1 http.Header) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadObjectWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadObjectWithSignedUrl indicates an expected call of HeadObjectWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) HeadObjectWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadObjectWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).HeadObjectWithSignedUrl), arg0, arg1)
}

// InitiateMultipartUpload mocks base method.
func (m *MockObsClientInterface) InitiateMultipartUpload(arg0 *obs.InitiateMultipartUploadInput, arg1 ...obs.ExtensionOptions) (*obs.InitiateMultipartUploadOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InitiateMultipartUpload", varargs...)
	ret0, _ := ret[0].(*obs.InitiateMultipartUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiateMultipartUpload indicates an expected call of InitiateMultipartUpload.
func (mr *MockObsClientInterfaceMockRecorder) InitiateMultipartUpload(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateMultipartUpload", reflect.TypeOf((*MockObsClientInterface)(nil).InitiateMultipartUpload), varargs...)
}

// InitiateMultipartUploadWithSignedUrl mocks base method.
func (m *MockObsClientInterface) InitiateMultipartUploadWithSignedUrl(arg0 string, arg1 http.Header) (*obs.InitiateMultipartUploadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiateMultipartUploadWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.InitiateMultipartUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiateMultipartUploadWithSignedUrl indicates an expected call of InitiateMultipartUploadWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) InitiateMultipartUploadWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateMultipartUploadWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).InitiateMultipartUploadWithSignedUrl), arg0, arg1)
}

// ListBuckets mocks base method.
func (m *MockObsClientInterface) ListBuckets(arg0 *obs.ListBucketsInput, arg1 ...obs.ExtensionOptions) (*obs.ListBucketsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBuckets", varargs...)
	ret0, _ := ret[0].(*obs.ListBucketsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuckets indicates an expected call of ListBuckets.
func (mr *MockObsClientInterfaceMockRecorder) ListBuckets(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuckets", reflect.TypeOf((*MockObsClientInterface)(nil).ListBuckets), varargs...)
}

// ListBucketsWithSignedUrl mocks base method.
func (m *MockObsClientInterface) ListBucketsWithSignedUrl(arg0 string, arg1 http.Header) (*obs.ListBucketsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBucketsWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.ListBucketsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBucketsWithSignedUrl indicates an expected call of ListBucketsWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) ListBucketsWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBucketsWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).ListBucketsWithSignedUrl), arg0, arg1)
}

// ListMultipartUploads mocks base method.
func (m *MockObsClientInterface) ListMultipartUploads(arg0 *obs.ListMultipartUploadsInput, arg1 ...obs.ExtensionOptions) (*obs.ListMultipartUploadsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMultipartUploads", varargs...)
	ret0, _ := ret[0].(*obs.ListMultipartUploadsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMultipartUploads indicates an expected call of ListMultipartUploads.
func (mr *MockObsClientInterfaceMockRecorder) ListMultipartUploads(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMultipartUploads", reflect.TypeOf((*MockObsClientInterface)(nil).ListMultipartUploads), varargs...)
}

// ListMultipartUploadsWithSignedUrl mocks base method.
func (m *MockObsClientInterface) ListMultipartUploadsWithSignedUrl(arg0 string, arg1 http.Header) (*obs.ListMultipartUploadsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMultipartUploadsWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.ListMultipartUploadsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMultipartUploadsWithSignedUrl indicates an expected call of ListMultipartUploadsWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) ListMultipartUploadsWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMultipartUploadsWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).ListMultipartUploadsWithSignedUrl), arg0, arg1)
}

// ListObjects mocks base method.
func (m *MockObsClientInterface) ListObjects(arg0 *obs.ListObjectsInput, arg1 ...obs.ExtensionOptions) (*obs.ListObjectsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListObjects", varargs...)
	ret0, _ := ret[0].(*obs.ListObjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjects indicates an expected call of ListObjects.
func (mr *MockObsClientInterfaceMockRecorder) ListObjects(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjects", reflect.TypeOf((*MockObsClientInterface)(nil).ListObjects), varargs...)
}

// ListObjectsWithSignedUrl mocks base method.
func (m *MockObsClientInterface) ListObjectsWithSignedUrl(arg0 string, arg1 http.Header) (*obs.ListObjectsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectsWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.ListObjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectsWithSignedUrl indicates an expected call of ListObjectsWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) ListObjectsWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectsWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).ListObjectsWithSignedUrl), arg0, arg1)
}

// ListParts mocks base method.
func (m *MockObsClientInterface) ListParts(arg0 *obs.ListPartsInput, arg1 ...obs.ExtensionOptions) (*obs.ListPartsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListParts", varargs...)
	ret0, _ := ret[0].(*obs.ListPartsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListParts indicates an expected call of ListParts.
func (mr *MockObsClientInterfaceMockRecorder) ListParts(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParts", reflect.TypeOf((*MockObsClientInterface)(nil).ListParts), varargs...)
}

// ListPartsWithSignedUrl mocks base method.
func (m *MockObsClientInterface) ListPartsWithSignedUrl(arg0 string, arg1 http.Header) (*obs.ListPartsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPartsWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.ListPartsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPartsWithSignedUrl indicates an expected call of ListPartsWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) ListPartsWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPartsWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).ListPartsWithSignedUrl), arg0, arg1)
}

// ListVersions mocks base method.
func (m *MockObsClientInterface) ListVersions(arg0 *obs.ListVersionsInput, arg1 ...obs.ExtensionOptions) (*obs.ListVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVersions", varargs...)
	ret0, _ := ret[0].(*obs.ListVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVersions indicates an expected call of ListVersions.
func (mr *MockObsClientInterfaceMockRecorder) ListVersions(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVersions", reflect.TypeOf((*MockObsClientInterface)(nil).ListVersions), varargs...)
}

// ListVersionsWithSignedUrl mocks base method.
func (m *MockObsClientInterface) ListVersionsWithSignedUrl(arg0 string, arg1 http.Header) (*obs.ListVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVersionsWithSignedUrl", arg0, arg1)
	ret0, _ := ret[0].(*obs.ListVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVersionsWithSignedUrl indicates an expected call of ListVersionsWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) ListVersionsWithSignedUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVersionsWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).ListVersionsWithSignedUrl), arg0, arg1)
}

// ModifyObject mocks base method.
func (m *MockObsClientInterface) ModifyObject(arg0 *obs.ModifyObjectInput, arg1 ...obs.ExtensionOptions) (*obs.ModifyObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyObject", varargs...)
	ret0, _ := ret[0].(*obs.ModifyObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyObject indicates an expected call of ModifyObject.
func (mr *MockObsClientInterfaceMockRecorder) ModifyObject(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyObject", reflect.TypeOf((*MockObsClientInterface)(nil).ModifyObject), varargs...)
}

// ModifyObjectWithSignedURL mocks base method.
func (m *MockObsClientInterface) ModifyObjectWithSignedURL(arg0 string, arg1 http.Header, arg2 io.Reader) (*obs.ModifyObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyObjectWithSignedURL", arg0, arg1, arg2)
	ret0, _ := ret[0].(*obs.ModifyObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyObjectWithSignedURL indicates an expected call of ModifyObjectWithSignedURL.
func (mr *MockObsClientInterfaceMockRecorder) ModifyObjectWithSignedURL(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyObjectWithSignedURL", reflect.TypeOf((*MockObsClientInterface)(nil).ModifyObjectWithSignedURL), arg0, arg1, arg2)
}

// NewFolder mocks base method.
func (m *MockObsClientInterface) NewFolder(arg0 *obs.NewFolderInput, arg1 ...obs.ExtensionOptions) (*obs.NewFolderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewFolder", varargs...)
	ret0, _ := ret[0].(*obs.NewFolderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewFolder indicates an expected call of NewFolder.
func (mr *MockObsClientInterfaceMockRecorder) NewFolder(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFolder", reflect.TypeOf((*MockObsClientInterface)(nil).NewFolder), varargs...)
}

// PutFile mocks base method.
func (m *MockObsClientInterface) PutFile(arg0 *obs.PutFileInput, arg1 ...obs.ExtensionOptions) (*obs.PutObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutFile", varargs...)
	ret0, _ := ret[0].(*obs.PutObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutFile indicates an expected call of PutFile.
func (mr *MockObsClientInterfaceMockRecorder) PutFile(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFile", reflect.TypeOf((*MockObsClientInterface)(nil).PutFile), varargs...)
}

// PutFileWithSignedUrl mocks base method.
func (m *MockObsClientInterface) PutFileWithSignedUrl(arg0 string, arg1 http.Header, arg2 string) (*obs.PutObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutFileWithSignedUrl", arg0, arg1, arg2)
	ret0, _ := ret[0].(*obs.PutObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutFileWithSignedUrl indicates an expected call of PutFileWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) PutFileWithSignedUrl(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFileWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).PutFileWithSignedUrl), arg0, arg1, arg2)
}

// PutObject mocks base method.
func (m *MockObsClientInterface) PutObject(arg0 *obs.PutObjectInput, arg1 ...obs.ExtensionOptions) (*obs.PutObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutObject", varargs...)
	ret0, _ := ret[0].(*obs.PutObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObject indicates an expected call of PutObject.
func (mr *MockObsClientInterfaceMockRecorder) PutObject(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockObsClientInterface)(nil).PutObject), varargs...)
}

// PutObjectWithSignedUrl mocks base method.
func (m *MockObsClientInterface) PutObjectWithSignedUrl(arg0 string, arg1 http.Header, arg2 io.Reader) (*obs.PutObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObjectWithSignedUrl", arg0, arg1, arg2)
	ret0, _ := ret[0].(*obs.PutObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObjectWithSignedUrl indicates an expected call of PutObjectWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) PutObjectWithSignedUrl(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObjectWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).PutObjectWithSignedUrl), arg0, arg1, arg2)
}

// RenameFile mocks base method.
func (m *MockObsClientInterface) RenameFile(arg0 *obs.RenameFileInput, arg1 ...obs.ExtensionOptions) (*obs.RenameFileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RenameFile", varargs...)
	ret0, _ := ret[0].(*obs.RenameFileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameFile indicates an expected call of RenameFile.
func (mr *MockObsClientInterfaceMockRecorder) RenameFile(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameFile", reflect.TypeOf((*MockObsClientInterface)(nil).RenameFile), varargs...)
}

// RenameFolder mocks base method.
func (m *MockObsClientInterface) RenameFolder(arg0 *obs.RenameFolderInput, arg1 ...obs.ExtensionOptions) (*obs.RenameFolderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RenameFolder", varargs...)
	ret0, _ := ret[0].(*obs.RenameFolderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameFolder indicates an expected call of RenameFolder.
func (mr *MockObsClientInterfaceMockRecorder) RenameFolder(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameFolder", reflect.TypeOf((*MockObsClientInterface)(nil).RenameFolder), varargs...)
}

// RestoreObject mocks base method.
func (m *MockObsClientInterface) RestoreObject(arg0 *obs.RestoreObjectInput, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreObject", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreObject indicates an expected call of RestoreObject.
func (mr *MockObsClientInterfaceMockRecorder) RestoreObject(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreObject", reflect.TypeOf((*MockObsClientInterface)(nil).RestoreObject), varargs...)
}

// RestoreObjectWithSignedUrl mocks base method.
func (m *MockObsClientInterface) RestoreObjectWithSignedUrl(arg0 string, arg1 http.Header, arg2 io.Reader) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreObjectWithSignedUrl", arg0, arg1, arg2)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreObjectWithSignedUrl indicates an expected call of RestoreObjectWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) RestoreObjectWithSignedUrl(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreObjectWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).RestoreObjectWithSignedUrl), arg0, arg1, arg2)
}

// SetBucketAcl mocks base method.
func (m *MockObsClientInterface) SetBucketAcl(arg0 *obs.SetBucketAclInput, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetBucketAcl", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBucketAcl indicates an expected call of SetBucketAcl.
func (mr *MockObsClientInterfaceMockRecorder) SetBucketAcl(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketAcl", reflect.TypeOf((*MockObsClientInterface)(nil).SetBucketAcl), varargs...)
}

// SetBucketAclWithSignedUrl mocks base method.
func (m *MockObsClientInterface) SetBucketAclWithSignedUrl(arg0 string, arg1 http.Header, arg2 io.Reader) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBucketAclWithSignedUrl", arg0, arg1, arg2)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBucketAclWithSignedUrl indicates an expected call of SetBucketAclWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) SetBucketAclWithSignedUrl(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketAclWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).SetBucketAclWithSignedUrl), arg0, arg1, arg2)
}

// SetBucketCors mocks base method.
func (m *MockObsClientInterface) SetBucketCors(arg0 *obs.SetBucketCorsInput, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetBucketCors", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBucketCors indicates an expected call of SetBucketCors.
func (mr *MockObsClientInterfaceMockRecorder) SetBucketCors(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketCors", reflect.TypeOf((*MockObsClientInterface)(nil).SetBucketCors), varargs...)
}

// SetBucketCorsWithSignedUrl mocks base method.
func (m *MockObsClientInterface) SetBucketCorsWithSignedUrl(arg0 string, arg1 http.Header, arg2 io.Reader) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBucketCorsWithSignedUrl", arg0, arg1, arg2)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBucketCorsWithSignedUrl indicates an expected call of SetBucketCorsWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) SetBucketCorsWithSignedUrl(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketCorsWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).SetBucketCorsWithSignedUrl), arg0, arg1, arg2)
}

// SetBucketCustomDomain mocks base method.
func (m *MockObsClientInterface) SetBucketCustomDomain(arg0 *obs.SetBucketCustomDomainInput, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetBucketCustomDomain", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBucketCustomDomain indicates an expected call of SetBucketCustomDomain.
func (mr *MockObsClientInterfaceMockRecorder) SetBucketCustomDomain(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketCustomDomain", reflect.TypeOf((*MockObsClientInterface)(nil).SetBucketCustomDomain), varargs...)
}

// SetBucketEncryption mocks base method.
func (m *MockObsClientInterface) SetBucketEncryption(arg0 *obs.SetBucketEncryptionInput, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetBucketEncryption", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBucketEncryption indicates an expected call of SetBucketEncryption.
func (mr *MockObsClientInterfaceMockRecorder) SetBucketEncryption(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketEncryption", reflect.TypeOf((*MockObsClientInterface)(nil).SetBucketEncryption), varargs...)
}

// SetBucketEncryptionWithSignedURL mocks base method.
func (m *MockObsClientInterface) SetBucketEncryptionWithSignedURL(arg0 string, arg1 http.Header, arg2 io.Reader) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBucketEncryptionWithSignedURL", arg0, arg1, arg2)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBucketEncryptionWithSignedURL indicates an expected call of SetBucketEncryptionWithSignedURL.
func (mr *MockObsClientInterfaceMockRecorder) SetBucketEncryptionWithSignedURL(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketEncryptionWithSignedURL", reflect.TypeOf((*MockObsClientInterface)(nil).SetBucketEncryptionWithSignedURL), arg0, arg1, arg2)
}

// SetBucketFetchJob mocks base method.
func (m *MockObsClientInterface) SetBucketFetchJob(arg0 *obs.SetBucketFetchJobInput, arg1 ...obs.ExtensionOptions) (*obs.SetBucketFetchJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetBucketFetchJob", varargs...)
	ret0, _ := ret[0].(*obs.SetBucketFetchJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBucketFetchJob indicates an expected call of SetBucketFetchJob.
func (mr *MockObsClientInterfaceMockRecorder) SetBucketFetchJob(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketFetchJob", reflect.TypeOf((*MockObsClientInterface)(nil).SetBucketFetchJob), varargs...)
}

// SetBucketFetchPolicy mocks base method.
func (m *MockObsClientInterface) SetBucketFetchPolicy(arg0 *obs.SetBucketFetchPolicyInput, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetBucketFetchPolicy", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBucketFetchPolicy indicates an expected call of SetBucketFetchPolicy.
func (mr *MockObsClientInterfaceMockRecorder) SetBucketFetchPolicy(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketFetchPolicy", reflect.TypeOf((*MockObsClientInterface)(nil).SetBucketFetchPolicy), varargs...)
}

// SetBucketLifecycleConfiguration mocks base method.
func (m *MockObsClientInterface) SetBucketLifecycleConfiguration(arg0 *obs.SetBucketLifecycleConfigurationInput, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetBucketLifecycleConfiguration", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBucketLifecycleConfiguration indicates an expected call of SetBucketLifecycleConfiguration.
func (mr *MockObsClientInterfaceMockRecorder) SetBucketLifecycleConfiguration(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketLifecycleConfiguration", reflect.TypeOf((*MockObsClientInterface)(nil).SetBucketLifecycleConfiguration), varargs...)
}

// SetBucketLifecycleConfigurationWithSignedUrl mocks base method.
func (m *MockObsClientInterface) SetBucketLifecycleConfigurationWithSignedUrl(arg0 string, arg1 http.Header, arg2 io.Reader) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBucketLifecycleConfigurationWithSignedUrl", arg0, arg1, arg2)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBucketLifecycleConfigurationWithSignedUrl indicates an expected call of SetBucketLifecycleConfigurationWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) SetBucketLifecycleConfigurationWithSignedUrl(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketLifecycleConfigurationWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).SetBucketLifecycleConfigurationWithSignedUrl), arg0, arg1, arg2)
}

// SetBucketLoggingConfiguration mocks base method.
func (m *MockObsClientInterface) SetBucketLoggingConfiguration(arg0 *obs.SetBucketLoggingConfigurationInput, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetBucketLoggingConfiguration", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBucketLoggingConfiguration indicates an expected call of SetBucketLoggingConfiguration.
func (mr *MockObsClientInterfaceMockRecorder) SetBucketLoggingConfiguration(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketLoggingConfiguration", reflect.TypeOf((*MockObsClientInterface)(nil).SetBucketLoggingConfiguration), varargs...)
}

// SetBucketLoggingConfigurationWithSignedUrl mocks base method.
func (m *MockObsClientInterface) SetBucketLoggingConfigurationWithSignedUrl(arg0 string, arg1 http.Header, arg2 io.Reader) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBucketLoggingConfigurationWithSignedUrl", arg0, arg1, arg2)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBucketLoggingConfigurationWithSignedUrl indicates an expected call of SetBucketLoggingConfigurationWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) SetBucketLoggingConfigurationWithSignedUrl(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketLoggingConfigurationWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).SetBucketLoggingConfigurationWithSignedUrl), arg0, arg1, arg2)
}

// SetBucketMirrorBackToSource mocks base method.
func (m *MockObsClientInterface) SetBucketMirrorBackToSource(arg0 *obs.SetBucketMirrorBackToSourceInput, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetBucketMirrorBackToSource", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBucketMirrorBackToSource indicates an expected call of SetBucketMirrorBackToSource.
func (mr *MockObsClientInterfaceMockRecorder) SetBucketMirrorBackToSource(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketMirrorBackToSource", reflect.TypeOf((*MockObsClientInterface)(nil).SetBucketMirrorBackToSource), varargs...)
}

// SetBucketNotification mocks base method.
func (m *MockObsClientInterface) SetBucketNotification(arg0 *obs.SetBucketNotificationInput, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetBucketNotification", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBucketNotification indicates an expected call of SetBucketNotification.
func (mr *MockObsClientInterfaceMockRecorder) SetBucketNotification(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketNotification", reflect.TypeOf((*MockObsClientInterface)(nil).SetBucketNotification), varargs...)
}

// SetBucketNotificationWithSignedUrl mocks base method.
func (m *MockObsClientInterface) SetBucketNotificationWithSignedUrl(arg0 string, arg1 http.Header, arg2 io.Reader) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBucketNotificationWithSignedUrl", arg0, arg1, arg2)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBucketNotificationWithSignedUrl indicates an expected call of SetBucketNotificationWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) SetBucketNotificationWithSignedUrl(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketNotificationWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).SetBucketNotificationWithSignedUrl), arg0, arg1, arg2)
}

// SetBucketPolicy mocks base method.
func (m *MockObsClientInterface) SetBucketPolicy(arg0 *obs.SetBucketPolicyInput, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetBucketPolicy", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBucketPolicy indicates an expected call of SetBucketPolicy.
func (mr *MockObsClientInterfaceMockRecorder) SetBucketPolicy(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketPolicy", reflect.TypeOf((*MockObsClientInterface)(nil).SetBucketPolicy), varargs...)
}

// SetBucketPolicyWithSignedUrl mocks base method.
func (m *MockObsClientInterface) SetBucketPolicyWithSignedUrl(arg0 string, arg1 http.Header, arg2 io.Reader) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBucketPolicyWithSignedUrl", arg0, arg1, arg2)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBucketPolicyWithSignedUrl indicates an expected call of SetBucketPolicyWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) SetBucketPolicyWithSignedUrl(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketPolicyWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).SetBucketPolicyWithSignedUrl), arg0, arg1, arg2)
}

// SetBucketQuota mocks base method.
func (m *MockObsClientInterface) SetBucketQuota(arg0 *obs.SetBucketQuotaInput, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetBucketQuota", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBucketQuota indicates an expected call of SetBucketQuota.
func (mr *MockObsClientInterfaceMockRecorder) SetBucketQuota(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketQuota", reflect.TypeOf((*MockObsClientInterface)(nil).SetBucketQuota), varargs...)
}

// SetBucketQuotaWithSignedUrl mocks base method.
func (m *MockObsClientInterface) SetBucketQuotaWithSignedUrl(arg0 string, arg1 http.Header, arg2 io.Reader) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBucketQuotaWithSignedUrl", arg0, arg1, arg2)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBucketQuotaWithSignedUrl indicates an expected call of SetBucketQuotaWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) SetBucketQuotaWithSignedUrl(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketQuotaWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).SetBucketQuotaWithSignedUrl), arg0, arg1, arg2)
}

// SetBucketRequestPayment mocks base method.
func (m *MockObsClientInterface) SetBucketRequestPayment(arg0 *obs.SetBucketRequestPaymentInput, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetBucketRequestPayment", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBucketRequestPayment indicates an expected call of SetBucketRequestPayment.
func (mr *MockObsClientInterfaceMockRecorder) SetBucketRequestPayment(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketRequestPayment", reflect.TypeOf((*MockObsClientInterface)(nil).SetBucketRequestPayment), varargs...)
}

// SetBucketRequestPaymentWithSignedUrl mocks base method.
func (m *MockObsClientInterface) SetBucketRequestPaymentWithSignedUrl(arg0 string, arg1 http.Header, arg2 io.Reader) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBucketRequestPaymentWithSignedUrl", arg0, arg1, arg2)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBucketRequestPaymentWithSignedUrl indicates an expected call of SetBucketRequestPaymentWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) SetBucketRequestPaymentWithSignedUrl(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketRequestPaymentWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).SetBucketRequestPaymentWithSignedUrl), arg0, arg1, arg2)
}

// SetBucketStoragePolicy mocks base method.
func (m *MockObsClientInterface) SetBucketStoragePolicy(arg0 *obs.SetBucketStoragePolicyInput, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetBucketStoragePolicy", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBucketStoragePolicy indicates an expected call of SetBucketStoragePolicy.
func (mr *MockObsClientInterfaceMockRecorder) SetBucketStoragePolicy(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketStoragePolicy", reflect.TypeOf((*MockObsClientInterface)(nil).SetBucketStoragePolicy), varargs...)
}

// SetBucketStoragePolicyWithSignedUrl mocks base method.
func (m *MockObsClientInterface) SetBucketStoragePolicyWithSignedUrl(arg0 string, arg1 http.Header, arg2 io.Reader) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBucketStoragePolicyWithSignedUrl", arg0, arg1, arg2)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBucketStoragePolicyWithSignedUrl indicates an expected call of SetBucketStoragePolicyWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) SetBucketStoragePolicyWithSignedUrl(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketStoragePolicyWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).SetBucketStoragePolicyWithSignedUrl), arg0, arg1, arg2)
}

// SetBucketTagging mocks base method.
func (m *MockObsClientInterface) SetBucketTagging(arg0 *obs.SetBucketTaggingInput, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetBucketTagging", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBucketTagging indicates an expected call of SetBucketTagging.
func (mr *MockObsClientInterfaceMockRecorder) SetBucketTagging(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketTagging", reflect.TypeOf((*MockObsClientInterface)(nil).SetBucketTagging), varargs...)
}

// SetBucketTaggingWithSignedUrl mocks base method.
func (m *MockObsClientInterface) SetBucketTaggingWithSignedUrl(arg0 string, arg1 http.Header, arg2 io.Reader) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBucketTaggingWithSignedUrl", arg0, arg1, arg2)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBucketTaggingWithSignedUrl indicates an expected call of SetBucketTaggingWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) SetBucketTaggingWithSignedUrl(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketTaggingWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).SetBucketTaggingWithSignedUrl), arg0, arg1, arg2)
}

// SetBucketVersioning mocks base method.
func (m *MockObsClientInterface) SetBucketVersioning(arg0 *obs.SetBucketVersioningInput, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetBucketVersioning", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBucketVersioning indicates an expected call of SetBucketVersioning.
func (mr *MockObsClientInterfaceMockRecorder) SetBucketVersioning(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketVersioning", reflect.TypeOf((*MockObsClientInterface)(nil).SetBucketVersioning), varargs...)
}

// SetBucketVersioningWithSignedUrl mocks base method.
func (m *MockObsClientInterface) SetBucketVersioningWithSignedUrl(arg0 string, arg1 http.Header, arg2 io.Reader) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBucketVersioningWithSignedUrl", arg0, arg1, arg2)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBucketVersioningWithSignedUrl indicates an expected call of SetBucketVersioningWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) SetBucketVersioningWithSignedUrl(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketVersioningWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).SetBucketVersioningWithSignedUrl), arg0, arg1, arg2)
}

// SetBucketWebsiteConfiguration mocks base method.
func (m *MockObsClientInterface) SetBucketWebsiteConfiguration(arg0 *obs.SetBucketWebsiteConfigurationInput, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetBucketWebsiteConfiguration", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBucketWebsiteConfiguration indicates an expected call of SetBucketWebsiteConfiguration.
func (mr *MockObsClientInterfaceMockRecorder) SetBucketWebsiteConfiguration(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketWebsiteConfiguration", reflect.TypeOf((*MockObsClientInterface)(nil).SetBucketWebsiteConfiguration), varargs...)
}

// SetBucketWebsiteConfigurationWithSignedUrl mocks base method.
func (m *MockObsClientInterface) SetBucketWebsiteConfigurationWithSignedUrl(arg0 string, arg1 http.Header, arg2 io.Reader) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBucketWebsiteConfigurationWithSignedUrl", arg0, arg1, arg2)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBucketWebsiteConfigurationWithSignedUrl indicates an expected call of SetBucketWebsiteConfigurationWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) SetBucketWebsiteConfigurationWithSignedUrl(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBucketWebsiteConfigurationWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).SetBucketWebsiteConfigurationWithSignedUrl), arg0, arg1, arg2)
}

// SetObjectAcl mocks base method.
func (m *MockObsClientInterface) SetObjectAcl(arg0 *obs.SetObjectAclInput, arg1 ...obs.ExtensionOptions) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetObjectAcl", varargs...)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetObjectAcl indicates an expected call of SetObjectAcl.
func (mr *MockObsClientInterfaceMockRecorder) SetObjectAcl(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetObjectAcl", reflect.TypeOf((*MockObsClientInterface)(nil).SetObjectAcl), varargs...)
}

// SetObjectAclWithSignedUrl mocks base method.
func (m *MockObsClientInterface) SetObjectAclWithSignedUrl(arg0 string, arg1 http.Header, arg2 io.Reader) (*obs.BaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetObjectAclWithSignedUrl", arg0, arg1, arg2)
	ret0, _ := ret[0].(*obs.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetObjectAclWithSignedUrl indicates an expected call of SetObjectAclWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) SetObjectAclWithSignedUrl(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetObjectAclWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).SetObjectAclWithSignedUrl), arg0, arg1, arg2)
}

// SetObjectMetadata mocks base method.
func (m *MockObsClientInterface) SetObjectMetadata(arg0 *obs.SetObjectMetadataInput, arg1 ...obs.ExtensionOptions) (*obs.SetObjectMetadataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetObjectMetadata", varargs...)
	ret0, _ := ret[0].(*obs.SetObjectMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetObjectMetadata indicates an expected call of SetObjectMetadata.
func (mr *MockObsClientInterfaceMockRecorder) SetObjectMetadata(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetObjectMetadata", reflect.TypeOf((*MockObsClientInterface)(nil).SetObjectMetadata), varargs...)
}

// UploadFile mocks base method.
func (m *MockObsClientInterface) UploadFile(arg0 *obs.UploadFileInput, arg1 ...obs.ExtensionOptions) (*obs.CompleteMultipartUploadOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadFile", varargs...)
	ret0, _ := ret[0].(*obs.CompleteMultipartUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockObsClientInterfaceMockRecorder) UploadFile(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockObsClientInterface)(nil).UploadFile), varargs...)
}

// UploadPart mocks base method.
func (m *MockObsClientInterface) UploadPart(arg0 *obs.UploadPartInput, arg1 ...obs.ExtensionOptions) (*obs.UploadPartOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadPart", varargs...)
	ret0, _ := ret[0].(*obs.UploadPartOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadPart indicates an expected call of UploadPart.
func (mr *MockObsClientInterfaceMockRecorder) UploadPart(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPart", reflect.TypeOf((*MockObsClientInterface)(nil).UploadPart), varargs...)
}

// UploadPartWithSignedUrl mocks base method.
func (m *MockObsClientInterface) UploadPartWithSignedUrl(arg0 string, arg1 http.Header, arg2 io.Reader) (*obs.UploadPartOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadPartWithSignedUrl", arg0, arg1, arg2)
	ret0, _ := ret[0].(*obs.UploadPartOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadPartWithSignedUrl indicates an expected call of UploadPartWithSignedUrl.
func (mr *MockObsClientInterfaceMockRecorder) UploadPartWithSignedUrl(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPartWithSignedUrl", reflect.TypeOf((*MockObsClientInterface)(nil).UploadPartWithSignedUrl), arg0, arg1, arg2)
}
